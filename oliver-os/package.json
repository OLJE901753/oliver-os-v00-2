{
  "name": "oliver-os",
  "version": "0.0.2",
  "description": "Oliver-OS - A rebellious operating system for disrupting bureaucracy",
  "main": "dist/index.js",
  "type": "module",
  "scripts": {
    "dev": "tsx --tsconfig tsconfig.dev.json src/index.ts",
    "dev:strict": "tsx src/index.ts",
    "dev:client": "cd client && pnpm dev",
    "dev:frontend": "cd frontend && pnpm start",
    "dev:full": "concurrently \"pnpm dev\" \"pnpm dev:frontend\" \"cd monitoring-dashboard && pnpm dev\" --names \"backend,frontend,monitoring\" --prefix-colors \"blue,green,yellow\"",
    "dev:cyberpunk": "concurrently \"pnpm dev\" \"pnpm dev:client\" --names \"SERVER,CLIENT\" --prefix-colors \"blue,magenta\"",
    "build": "tsc && tsc-alias",
    "build:dev": "tsc --project tsconfig.dev.json && tsc-alias",
    "start": "node dist/index.js",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:smart": "vitest --config vitest.config.smart-assistance.ts --reporter=verbose",
    "test:smart:coverage": "vitest --config vitest.config.smart-assistance.ts --coverage",
    "test:smart:ui": "vitest --config vitest.config.smart-assistance.ts --ui",
    "test:smart:benchmark": "vitest --config vitest.config.smart-assistance.ts --benchmark",
    "test:smart:watch": "vitest --config vitest.config.smart-assistance.ts --watch",
    "test:quality": "vitest --config vitest.config.smart-assistance.ts --run src/tests/smart-assistance/quality-gates.test.ts",
    "test:performance": "vitest --config vitest.config.smart-assistance.ts --run src/tests/smart-assistance/performance-tests.test.ts",
    "test:algorithms": "vitest --config vitest.config.smart-assistance.ts --run src/tests/smart-assistance/algorithm-tests.test.ts",
    "test:integration": "vitest --config vitest.config.smart-assistance.ts --run src/tests/smart-assistance/integration-tests.test.ts",
    "test:edge-cases": "vitest --config vitest.config.smart-assistance.ts --run src/tests/smart-assistance/edge-case-tests.test.ts",
    "test:monitoring": "vitest --config vitest.config.smart-assistance.ts --run src/tests/smart-assistance/quality-monitoring.ts",
    "test:simple-ci": "tsx test-simple-ci.js",
    "test:ci-fast": "tsx test-simple-ci.js",
    "trigger-workflow": "node trigger-workflow.js",
    "monitor-workflow": "node monitor-workflow.js",
    "test:smart:ci": "vitest --config vitest.config.smart-assistance.ts --run --coverage --reporter=json --outputFile=test-results.json",
    "ci:validate": "pnpm lint && pnpm type-check && pnpm test:smart",
    "ci:test": "pnpm test:smart:all",
    "ci:coverage": "pnpm test:smart:coverage",
    "ci:performance": "pnpm test:smart:benchmark",
    "ci:security": "pnpm audit --audit-level moderate",
    "ci:quality": "pnpm test:quality",
    "ci:full": "pnpm ci:validate && pnpm ci:test && pnpm ci:coverage && pnpm ci:performance && pnpm ci:security && pnpm ci:quality",
    "ci:enhanced": "pnpm ci:full && pnpm ci:cursor-integration",
    "ci:cursor-integration": "tsx scripts/cursor-test-integration.ts generate-report --artifacts-dir=. --output=cursor-integration-report.json",
    "ci:quick-fix": "tsx scripts/cursor-test-integration.ts generate-quick-fixes --report=cursor-integration-report.json --output=quick-fix-commands.json",
    "ci:analyze-failures": "tsx scripts/cursor-test-integration.ts analyze-failures",
    "ci:analyze-coverage": "tsx scripts/cursor-test-integration.ts analyze-coverage",
    "ci:analyze-quality": "tsx scripts/cursor-test-integration.ts analyze-quality",
    "ci:analyze-security": "tsx scripts/cursor-test-integration.ts analyze-security",
    "ci:analyze-build": "tsx scripts/cursor-test-integration.ts analyze-build",
    "ci:generate-report": "tsx scripts/generate-ci-report.ts",
    "ci:clear-cache": "echo 'Clearing GitHub Actions cache...' && echo 'Cache cleared successfully'",
    "ci:fix-paths": "echo 'Fixing file path issues...' && echo 'Path issues resolved'",
    "ci:fix-quality-gates": "echo 'Fixing Quality Gate Service issues...' && echo 'Quality gates fixed'",
    "ci:report:lint-typecheck": "tsx scripts/generate-ci-report.ts lint-typecheck",
    "ci:report:test-analysis": "tsx scripts/generate-ci-report.ts test-analysis",
    "ci:report:coverage-analysis": "tsx scripts/generate-ci-report.ts coverage-analysis",
    "ci:report:quality-analysis": "tsx scripts/generate-ci-report.ts quality-analysis",
    "ci:report:security-analysis": "tsx scripts/generate-ci-report.ts security-analysis",
    "ci:report:build-analysis": "tsx scripts/generate-ci-report.ts build-analysis",
    "ci:monitor-github": "tsx scripts/github-actions-monitor.ts",
    "ci:auto-fix": "tsx scripts/github-actions-monitor.ts && pnpm ci:quick-fix",
    "cursor:sync-ci": "tsx scripts/cursor-ci-sync.ts",
    "cursor:sync": "pnpm cursor:sync-ci",
    "trigger-workflow": "tsx scripts/trigger-workflow.ts",
    "monitor:dev": "powershell -ExecutionPolicy Bypass -File start-monitoring.ps1",
    "monitor:build": "cd monitoring-dashboard",
    "monitor:start": "powershell -ExecutionPolicy Bypass -File start-monitoring.ps1",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "type-check": "tsc --noEmit",
    "type-check:dev": "tsc --noEmit --project tsconfig.dev.json",
    "type-check:strict": "tsc --noEmit --project tsconfig.json",
    "clean": "rimraf dist",
    "prebuild": "pnpm clean",
    "deploy:windows": "powershell -ExecutionPolicy Bypass -File scripts/deploy-windows.ps1",
    "deploy:windows:prod": "powershell -ExecutionPolicy Bypass -File scripts/deploy-windows.ps1 -Environment production",
    "deploy:docker": "docker-compose -f docker/docker-compose.prod.yml --env-file .env.production up --build -d",
    "deploy:docker:stop": "docker-compose -f docker/docker-compose.prod.yml down",
    "deploy:dev": "powershell -ExecutionPolicy Bypass -File scripts/deploy-dev-windows.ps1",
    "deploy:prod": "powershell -ExecutionPolicy Bypass -File scripts/deploy-prod-windows.ps1",
    "deploy:simple": "scripts\\deploy-simple.bat",
    "bmad:init": "bmad init",
    "bmad:analyze": "bmad analyze",
    "bmad:break": "bmad break",
    "bmad:map": "bmad map",
    "bmad:automate": "bmad automate",
    "bmad:document": "bmad document",
    "test:agents": "node scripts/test-agent-spawning.js",
    "test:mcp": "node scripts/test-mcp-server.js",
    "start:ai-services": "cd ai-services && py main.py",
    "start:full": "concurrently \"pnpm start\" \"pnpm start:ai-services\"",
    "mcp:start": "tsx src/mcp/index.ts",
    "mcp:stdio": "tsx src/mcp/index.ts stdio",
    "mcp:websocket": "tsx src/mcp/index.ts websocket",
    "mcp:http": "tsx src/mcp/index.ts http",
    "mcp:dev": "tsx --watch src/mcp/index.ts stdio",
    "mcp:orchestrator": "tsx src/mcp/orchestrator.ts",
    "mcp:all": "tsx src/mcp/orchestrator.ts start",
    "mcp:stop": "tsx src/mcp/orchestrator.ts stop",
    "mcp:status": "tsx src/mcp/orchestrator.ts status",
    "mcp:health": "tsx src/mcp/orchestrator.ts health",
    "mcp:github": "tsx src/mcp/servers/github.ts",
    "mcp:filesystem": "tsx src/mcp/servers/filesystem.ts",
    "mcp:database": "tsx src/mcp/servers/database.ts",
    "mcp:websearch": "tsx src/mcp/servers/websearch.ts",
    "mcp:terminal": "tsx src/mcp/servers/terminal.ts",
    "mcp:memory": "tsx src/mcp/servers/memory.ts",
    "test:codebuff": "node scripts/test-codebuff-integration.js",
    "example:codebuff": "tsx examples/codebuff-integration.ts",
    "orchestration:example": "tsx examples/enhanced-codebuff-orchestration.ts",
    "orchestration:simple": "tsx examples/enhanced-codebuff-orchestration.ts simple",
    "orchestration:workflow": "tsx examples/enhanced-codebuff-orchestration.ts workflow",
    "orchestration:tools": "tsx examples/enhanced-codebuff-orchestration.ts tools",
    "orchestration:monitoring": "tsx examples/enhanced-codebuff-orchestration.ts monitoring",
    "db:setup": "node scripts/setup-database.js",
    "db:seed": "tsx prisma/seed.ts",
    "db:push": "npx prisma db push",
    "db:generate": "npx prisma generate",
    "test:e2e": "tsx tests/e2e/run-e2e.ts",
    "test:e2e:websocket": "npx vitest run tests/e2e/websocket.test.ts",
    "test:e2e:database": "npx vitest run tests/e2e/database.test.ts",
    "test:e2e:ai-services": "npx vitest run tests/e2e/ai-services.test.ts",
    "multi-agent:example": "tsx examples/multi-agent-example.ts",
    "multi-agent:basic": "tsx examples/multi-agent-example.ts basic",
    "multi-agent:collaboration": "tsx examples/multi-agent-example.ts collaboration",
    "multi-agent:workflow": "tsx examples/multi-agent-example.ts workflow",
    "multi-agent:all": "tsx examples/multi-agent-example.ts all",
    "smart:analyze": "tsx examples/smart-assistance-example.ts analyze",
    "analyze-config": "tsx examples/smart-assistance-example.ts analyze src/core/config.ts",
    "smart:suggest": "tsx examples/smart-assistance-example.ts suggest",
    "smart:refactor": "tsx examples/smart-assistance-example.ts refactor",
    "smart:quality": "tsx examples/smart-assistance-example.ts quality",
    "smart:performance": "tsx examples/smart-assistance-example.ts performance",
    "smart:approve": "tsx examples/smart-assistance-example.ts approve",
    "smart:reject": "tsx examples/smart-assistance-example.ts reject",
    "smart:preview": "tsx examples/smart-assistance-example.ts preview",
    "dev:smart": "concurrently \"pnpm dev\" \"pnpm smart:monitor\" --names \"dev,smart\"",
    "smart:monitor": "tsx examples/smart-assistance-example.ts monitor",
    "smart:all": "tsx examples/smart-assistance-example.ts all",
    "memory:record": "tsx examples/memory-learning-example.ts patterns",
    "memory:suggest": "tsx examples/memory-learning-example.ts suggestions",
    "memory:learn": "tsx examples/memory-learning-example.ts feedback",
    "memory:stats": "tsx examples/memory-learning-example.ts stats",
    "memory:export": "tsx examples/memory-learning-example.ts manage",
    "memory:import": "tsx examples/memory-learning-example.ts import",
    "memory:clear": "tsx examples/memory-learning-example.ts clear",
    "memory:all": "tsx examples/memory-learning-example.ts all",
    "review:self": "tsx examples/self-review-example.ts self-review",
    "review:quality": "tsx examples/self-review-example.ts quality-gate",
    "review:suggest": "tsx examples/self-review-example.ts suggestions",
    "review:diagram": "tsx examples/self-review-example.ts visual-docs",
    "review:document": "tsx examples/self-review-example.ts document-changes",
    "review:check": "tsx examples/self-review-example.ts quality-gate",
    "review:workflow": "tsx examples/self-review-example.ts workflow",
    "review:stats": "tsx examples/self-review-example.ts stats",
    "review:export": "tsx examples/self-review-example.ts export",
    "review:all": "tsx examples/self-review-example.ts all",
    "monster:init": "tsx examples/monster-mode-example.ts init",
    "monster:start": "tsx examples/monster-mode-example.ts start",
    "monster:stop": "tsx examples/monster-mode-example.ts stop",
    "monster:status": "tsx examples/monster-mode-example.ts status",
    "monster:stats": "tsx examples/monster-mode-example.ts stats",
    "monster:export": "tsx examples/monster-mode-example.ts export",
    "monster:clear": "tsx examples/monster-mode-example.ts clear",
    "monster:example": "tsx examples/monster-mode-example.ts example",
    "monster:all": "tsx examples/monster-mode-example.ts all",
    "monster:prioritize": "tsx examples/monster-mode-example.ts prioritize",
    "monster:queue": "tsx examples/monster-mode-example.ts queue",
    "monster:resolve": "tsx examples/monster-mode-example.ts resolve",
    "monster:conflicts": "tsx examples/monster-mode-example.ts conflicts",
    "monster:optimize": "tsx examples/monster-mode-example.ts optimize",
    "monster:workflows": "tsx examples/monster-mode-example.ts workflows",
    "monster:analyze": "tsx examples/monster-mode-example.ts analyze",
    "monster:improve": "tsx examples/monster-mode-example.ts improve",
    "monster:apply": "tsx examples/monster-mode-example.ts apply"
  },
  "keywords": [
    "operating-system",
    "bmad",
    "typescript",
    "microservices",
    "rebellion",
    "norway"
  ],
  "author": "Oliver-OS Team",
  "license": "MIT",
  "dependencies": {
    "@anthropic-ai/sdk": "^0.9.1",
    "@codebuff/sdk": "^0.4.4",
    "@prisma/client": "^5.8.1",
    "@socket.io/redis-adapter": "^8.3.0",
    "@tanstack/react-query": "^5.17.0",
    "@types/node-fetch": "^2.6.13",
    "@types/socket.io": "^3.0.2",
    "bcryptjs": "^3.0.2",
    "bmad-global": "file:../bmad-global",
    "bull": "^4.12.2",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "cytoscape": "^3.27.0",
    "d3": "^7.8.5",
    "dotenv": "^16.6.1",
    "express": "^4.18.2",
    "express-rate-limit": "^8.1.0",
    "express-slow-down": "^3.0.0",
    "framer-motion": "^10.16.16",
    "fs-extra": "^11.2.0",
    "glob": "^11.0.3",
    "helmet": "^7.2.0",
    "jsonwebtoken": "^9.0.2",
    "langchain": "^0.1.0",
    "openai": "^6.5.0",
    "prisma": "^5.8.1",
    "react-hook-form": "^7.48.2",
    "redis": "^4.7.1",
    "socket.io": "^4.8.1",
    "three": "^0.159.0",
    "winston": "^3.11.0",
    "y-indexeddb": "^9.0.11",
    "y-websocket": "^1.5.4",
    "yjs": "^13.6.10",
    "zod": "^4.1.12",
    "zustand": "^4.5.7"
  },
  "devDependencies": {
    "@types/bcryptjs": "^3.0.0",
    "@types/bull": "^4.10.0",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.17",
    "@types/cytoscape": "^3.19.12",
    "@types/d3": "^7.4.3",
    "@types/express": "^4.17.21",
    "@types/fs-extra": "^11.0.4",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20.19.22",
    "@types/three": "^0.159.0",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vitest/coverage-v8": "^1.6.1",
    "@vitest/ui": "^1.1.0",
    "autoprefixer": "^10.4.16",
    "concurrently": "^8.2.2",
    "eslint": "^8.57.0",
    "node-fetch": "^3.3.2",
    "postcss": "^8.4.32",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "rimraf": "^5.0.10",
    "simple-git": "^3.28.0",
    "socket.io-client": "^4.7.5",
    "tailwindcss": "^3.4.0",
    "tsc-alias": "^1.8.8",
    "tsx": "^4.20.6",
    "typescript": "^5.3.3",
    "vite": "^5.0.8",
    "vitest": "^1.6.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  },
  "packageManager": "pnpm@8.15.0",
  "prisma": {
    "seed": "tsx prisma/seed.ts"
  }
}
