name: Oliver-OS Deployment Pipeline

# Phase 5.3: Deployment automation
# Triggers: Push to main (production), develop (staging)
# Includes: Build, Test, Deploy, Health Check, Rollback capability

on:
  push:
    branches:
      - main    # Production deployment
      - develop # Staging deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  REGISTRY: ghcr.io

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test:api || true

      - name: Build
        run: pnpm build

  # Build Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/oliver-os
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./oliver-os
          file: ./oliver-os/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.oliver-os.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply, docker-compose up, etc.

      - name: Health check
        run: |
          echo "Waiting for deployment..."
          sleep 30
          curl -f https://staging.oliver-os.com/api/health || exit 1
          curl -f https://staging.oliver-os.com/api/health/ready || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Staging deployment successful"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://oliver-os.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create backup before deployment
        run: |
          echo "Creating backup before production deployment..."
          # Trigger backup API or script

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here

      - name: Health check
        run: |
          echo "Waiting for deployment..."
          sleep 60
          curl -f https://oliver-os.com/api/health || exit 1
          curl -f https://oliver-os.com/api/health/ready || exit 1
          curl -f https://oliver-os.com/api/health/metrics || exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed, initiating rollback..."
          # Add rollback logic here

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful"

  # Post-deployment verification
  post-deploy-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Verify staging deployment
        if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
        run: |
          echo "Verifying staging deployment..."
          curl -f https://staging.oliver-os.com/api/health/detailed || exit 1

      - name: Verify production deployment
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
        run: |
          echo "Verifying production deployment..."
          curl -f https://oliver-os.com/api/health/detailed || exit 1

      - name: Check backup functionality
        run: |
          # Verify backup endpoints are working
          echo "Verifying backup functionality..."

