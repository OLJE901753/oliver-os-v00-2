name: Nightly Smart Assistance Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Comprehensive nightly testing
  nightly-comprehensive-tests:
    name: Nightly Comprehensive Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all smart assistance tests
        run: pnpm test:smart:all

      - name: Run performance benchmarks
        run: pnpm test:smart:benchmark

      - name: Run coverage analysis
        run: pnpm test:smart:coverage

      - name: Generate quality report
        run: pnpm test:smart:ci

      - name: Upload nightly test results
        uses: actions/upload-artifact@v3
        with:
          name: nightly-test-results-${{ github.run_number }}
          path: |
            test-results/
            coverage/
            benchmark-results.json

  # Performance regression testing
  performance-regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance tests
        run: pnpm test:performance

      - name: Run memory leak tests
        run: pnpm test:smart -- --reporter=json --outputFile=memory-test-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ github.run_number }}
          path: |
            benchmark-results.json
            memory-test-results.json

  # Security and vulnerability scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        if: ${{ secrets.SNYK_TOKEN != '' }}
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.run_number }}
          path: snyk.sarif

  # Quality monitoring and reporting
  quality-monitoring:
    name: Quality Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run quality monitoring tests
        run: pnpm test:monitoring

      - name: Generate quality dashboard data
        run: |
          # Generate quality metrics for dashboard
          pnpm test:smart:ci
          
          # Create quality summary
          echo "# Nightly Quality Report - $(date)" > quality-summary.md
          echo "## Test Results" >> quality-summary.md
          echo "- Date: $(date)" >> quality-summary.md
          echo "- Commit: ${{ github.sha }}" >> quality-summary.md
          echo "- Branch: ${{ github.ref_name }}" >> quality-summary.md
          echo "" >> quality-summary.md
          echo "## Quality Metrics" >> quality-summary.md
          echo "- All tests completed successfully" >> quality-summary.md

      - name: Upload quality monitoring results
        uses: actions/upload-artifact@v3
        with:
          name: quality-monitoring-${{ github.run_number }}
          path: |
            test-results/
            quality-summary.md

  # Notification and reporting
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [nightly-comprehensive-tests, performance-regression, security-scan, quality-monitoring]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Generate summary report
        run: |
          echo "# Nightly Test Summary - $(date)" > nightly-summary.md
          echo "" >> nightly-summary.md
          echo "## Test Results" >> nightly-summary.md
          echo "- Comprehensive Tests: ${{ needs.nightly-comprehensive-tests.result }}" >> nightly-summary.md
          echo "- Performance Regression: ${{ needs.performance-regression.result }}" >> nightly-summary.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> nightly-summary.md
          echo "- Quality Monitoring: ${{ needs.quality-monitoring.result }}" >> nightly-summary.md
          echo "" >> nightly-summary.md
          echo "## Artifacts" >> nightly-summary.md
          echo "- Test Results: Available in artifacts" >> nightly-summary.md
          echo "- Coverage Reports: Available in artifacts" >> nightly-summary.md
          echo "- Performance Data: Available in artifacts" >> nightly-summary.md
          echo "- Security Reports: Available in artifacts" >> nightly-summary.md

      - name: Upload summary report
        uses: actions/upload-artifact@v3
        with:
          name: nightly-summary-${{ github.run_number }}
          path: nightly-summary.md

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Nightly tests failed!"
          echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: Notify on success
        if: success()
        run: |
          echo "✅ All nightly tests passed!"
          echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add notification logic here (Slack, Discord, email, etc.)
