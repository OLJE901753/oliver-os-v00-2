name: Oliver-OS CI/CD Pipeline

# Phase 5.3: Comprehensive CI/CD Pipeline
# Triggers: Push to main/develop, PRs, scheduled runs
# Includes: Lint, Type Check, Tests, Build, Deploy, Health Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and Type Check
  lint-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('oliver-os/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint || true

      - name: Run TypeScript type check
        run: pnpm type-check

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: oliver-os/eslint-results.json
          if-no-files-found: ignore

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('oliver-os/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run API tests
        run: pnpm test:api || true

      - name: Run API tests with coverage
        run: pnpm test:api:coverage || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            oliver-os/coverage/
            oliver-os/test-results/

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oliver-os/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('oliver-os/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-frontend-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run component tests
        run: pnpm test:components || true

      - name: Run E2E tests
        run: pnpm test:e2e || true

      - name: Run performance tests
        run: pnpm test:performance || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            oliver-os/frontend/coverage/
            oliver-os/frontend/test-results/

  # Python AI Services Tests
  ai-services-tests:
    name: AI Services Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oliver-os/ai-services
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('oliver-os/ai-services/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          python -m pytest tests/ -v || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-services-test-results
          path: oliver-os/ai-services/test-results/

  # Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-typecheck]
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('oliver-os/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend
        run: pnpm build

      - name: Build frontend
        run: |
          cd frontend
          pnpm install --frozen-lockfile
          pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            oliver-os/dist/
            oliver-os/frontend/dist/
          retention-days: 7

  # Health Check & Smoke Tests
  health-check:
    name: Health Check & Smoke Tests
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Start server
        run: |
          SKIP_DB_INIT=true pnpm start &
          sleep 10

      - name: Check health endpoint
        run: |
          curl -f http://localhost:3000/api/health || exit 1

      - name: Check detailed health endpoint
        run: |
          curl -f http://localhost:3000/api/health/detailed || exit 1

      - name: Check readiness probe
        run: |
          curl -f http://localhost:3000/api/health/ready || exit 1

      - name: Check liveness probe
        run: |
          curl -f http://localhost:3000/api/health/live || exit 1

      - name: Check metrics endpoint
        run: |
          curl -f http://localhost:3000/api/health/metrics || exit 1

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate || true

      - name: Run dependency check
        run: pnpm audit --json > audit-results.json || true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: oliver-os/audit-results.json

  # Backup Verification
  backup-verification:
    name: Backup Verification
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: ./oliver-os
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test backup creation
        run: |
          pnpm backup:create || echo "Backup creation test completed"

      - name: Test backup listing
        run: |
          pnpm backup:list || echo "Backup listing test completed"

      - name: Verify backup API endpoints
        run: |
          # Start server in background
          SKIP_DB_INIT=true pnpm start &
          sleep 10
          
          # Test backup API
          curl -X POST http://localhost:3000/api/backup/create || echo "Backup API test completed"
          curl http://localhost:3000/api/backup/list || echo "Backup list API test completed"

  # Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-typecheck, backend-tests, frontend-tests, ai-services-tests, build, health-check, security-scan]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Jobs Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Type Check: ${{ needs.lint-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- AI Services Tests: ${{ needs.ai-services-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: ${{ needs.health-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY

