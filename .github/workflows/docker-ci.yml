name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker image
  build-and-test:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Test Docker container
  test-container:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          docker build -t smart-assistance-test .

      - name: Run container tests
        run: |
          # Start container in background
          docker run -d --name smart-assistance-test -p 3000:3000 smart-assistance-test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1
          
          # Run tests inside container
          docker exec smart-assistance-test pnpm test:smart
          
          # Stop container
          docker stop smart-assistance-test
          docker rm smart-assistance-test

      - name: Test container performance
        run: |
          # Start container
          docker run -d --name smart-assistance-perf -p 3000:3000 smart-assistance-test
          sleep 10
          
          # Run performance tests
          docker exec smart-assistance-perf pnpm test:performance
          
          # Test memory usage
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" smart-assistance-perf
          
          # Stop container
          docker stop smart-assistance-perf
          docker rm smart-assistance-perf

  # Security scan Docker image
  security-scan:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-container, security-scan]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying Docker image to staging..."
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, or cloud deployment

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-container, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying Docker image to production..."
          # Add your production deployment commands here
          # Example: kubectl, docker-compose, or cloud deployment
