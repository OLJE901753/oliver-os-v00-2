name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker image
  build-and-test:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./oliver-os
          file: ./oliver-os/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            SKIP_DB_INIT=true

      - name: Build and push AI Services Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./oliver-os/ai-services
          file: ./oliver-os/ai-services/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ai-services:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Test Docker container
  test-container:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test images
        run: |
          echo "Building backend test image..."
          docker build -f ./oliver-os/Dockerfile -t oliver-os-backend-test ./oliver-os
          
          echo "Building AI services test image..."
          docker build -f ./oliver-os/ai-services/Dockerfile -t oliver-os-ai-test ./oliver-os/ai-services

      - name: Check containers built successfully
        run: |
          echo "Checking if Docker images were built..."
          docker images | grep oliver-os-backend-test
          docker images | grep oliver-os-ai-test
          echo "✅ Container images exist"
          
      - name: Run backend container with timeout
        timeout-minutes: 3
        run: |
          # Start backend container
          echo "Starting backend container..."
          docker run -d --name oliver-backend-test -p 3000:3000 \
            -e NODE_ENV=test \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            -e SKIP_DB_INIT=true \
            oliver-os-backend-test || true
          
          # Wait for container to initialize
          echo "Waiting for container to initialize..."
          sleep 10
          
          # Show container logs
          echo "Backend container logs:"
          docker logs oliver-backend-test || true
          
          # Check if container is running
          echo "Backend container status:"
          docker ps -a | grep oliver-backend-test
          
      - name: Run AI services container with timeout
        timeout-minutes: 3
        run: |
          # Start AI services container
          echo "Starting AI services container..."
          docker run -d --name oliver-ai-test -p 8000:8000 \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            -e REDIS_URL="redis://localhost:6379" \
            oliver-os-ai-test || true
          
          # Wait for container to initialize
          echo "Waiting for AI services to initialize..."
          sleep 15
          
          # Show container logs
          echo "AI services container logs:"
          docker logs oliver-ai-test || true
          
          # Check if container is running
          echo "AI services container status:"
          docker ps -a | grep oliver-ai-test
          
      - name: Test backend container health
        continue-on-error: true
        run: |
          echo "Checking backend health..."
          for i in {1..10}; do
            if curl -f -s http://localhost:3000/health; then
              echo "✅ Backend is responding!"
              break
            fi
            echo "Attempt $i/10: Waiting for backend..."
            sleep 3
          done
          
      - name: Test AI services container health
        continue-on-error: true
        run: |
          echo "Checking AI services health..."
          for i in {1..10}; do
            if curl -f -s http://localhost:8000/health; then
              echo "✅ AI services is responding!"
              break
            fi
            echo "Attempt $i/10: Waiting for AI services..."
            sleep 3
          done
          
      - name: Clean up containers
        if: always()
        run: |
          echo "Cleaning up containers..."
          docker stop oliver-backend-test oliver-ai-test || true
          docker rm oliver-backend-test oliver-ai-test || true

      - name: Analyze container images
        run: |
          echo "📦 Analyzing container images..."
          echo "Backend image size:"
          docker images oliver-os-backend-test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          
          echo "AI services image size:"
          docker images oliver-os-ai-test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          
          echo "✅ Container image analysis complete"

  # Security scan Docker image
  security-scan:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image for scanning
        run: |
          echo "Pulling Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} || \
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop || \
          echo "⚠️ Could not pull image, will scan build context instead"

      - name: Run Trivy vulnerability scanner
        id: trivy
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: false

      - name: Create empty SARIF if scan failed
        if: steps.trivy.outcome == 'failure' || steps.trivy.outcome == 'cancelled'
        run: |
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy","informationUri":"https://github.com/aquasecurity/trivy"}},"results":[]}]}' > trivy-results.sarif

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-scan'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-container, security-scan]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying Docker image to staging..."
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, or cloud deployment

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-container, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying Docker image to production..."
          # Add your production deployment commands here
          # Example: kubectl, docker-compose, or cloud deployment
