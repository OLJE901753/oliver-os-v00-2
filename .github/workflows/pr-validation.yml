name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quick validation for PRs
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run smart assistance tests
        run: pnpm test:smart

      - name: Run quality gates
        run: pnpm test:quality

      - name: Comment PR with test results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results if available
            let testResults = 'Tests completed successfully! âœ…';
            try {
              if (fs.existsSync('test-results.json')) {
                const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
                testResults = `## Test Results\n\n- **Total Tests**: ${results.numTotalTests || 'N/A'}\n- **Passed**: ${results.numPassedTests || 'N/A'}\n- **Failed**: ${results.numFailedTests || 'N/A'}\n- **Duration**: ${results.duration || 'N/A'}ms`;
              }
            } catch (error) {
              testResults = 'Test results could not be parsed.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ§ª Smart Assistance Test Results\n\n${testResults}\n\n---\n*This comment was automatically generated by the CI/CD pipeline.*`
            });
